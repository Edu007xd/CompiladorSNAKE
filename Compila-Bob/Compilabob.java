/* Generated By:JJTree&JavaCC: Do not edit this line. Compilabob.java */
import java.util.*;
import java.io.*;

public class Compilabob/*@bgen(jjtree)*/implements CompilabobTreeConstants, CompilabobConstants {/*@bgen(jjtree)*/
  protected JJTCompilabobState jjtree = new JJTCompilabobState();
        //********************
        public static Hashtable ST  = new Hashtable();
        String temp;
        STC temp2;

        String errormsg="",datos = "";
        static  String expresion =" ";
        int sentencias_inco =0;
        //variables para semantica-------------------------------
    String Type="", Valor=""; //variables cache para capturar el par
    String lugar = "";
        Token var;
    //--------------------------------------------------------
        public static void main(String args[])  {
                Compilabob compilador = new Compilabob(System.in);
                try {
                        SimpleNode e = compilador.Codigo();
                        e.dump(">");



                        /* *******************
			Enumeration t = ST.keys();
			while(t.hasMoreElements() == true){
				temp = (String)t.nextElement
			}
			*/

                }catch(ParseException pe){
            pe.printStackTrace();
        }
        catch( Exception e ){
                        System.out.println("\nEXCEPTION e MAIN\n" +"Sentencias incorrectas encontradas: "+compilador.sentencias_inco);
                }
                catch( TokenMgrError e ) {
                        System.out.println( "Error de Token" );
                }
                if(compilador.errormsg == "\n" && compilador.sentencias_inco == 0){
                        System.out.println("An"+"\u00e1"+"lisis l"+"\u00e9"+"xico y sint"+"\u00e1"+"ctico ejecutados con "+"\u00e9"+"xito");
                }else{
                        System.out.println(compilador.errormsg);
                }
                System.out.println("PILA SEMANTICA CREADA EXITOSAMENTE");
                System.out.println("FINAL PRINT\n" +"Sentencias incorrectas encontradas: "+compilador.sentencias_inco);
                System.out.println("----- Tabla de simbolos ----\n"+ ClaseSemantica.tabla);
                ClaseSemantica.Crear_txt();
                //System.out.println("EXPRESION ----- : "+expresion);
        }

//------------------------------- AN√?LISIS SINTACTICO - AREA DE GRAMATICAS ----------------------------------------------------

// Gramatica inicial que contiene el cuerpo basico del codigo
  final public SimpleNode Codigo() throws ParseException {
 /*@bgen(jjtree) Codigo */
        ASTCodigo jjtn000 = new ASTCodigo(JJTCODIGO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);//Se inicializan las tablas donde seran referencia para verrificar validez semantica
        ClaseSemantica.SetTables();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INICIO:
        jj_consume_token(INICIO);
        break;
      default:
        jj_la1[0] = jj_gen;
        ErrorNoinicio();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SepIzq:
        jj_consume_token(SepIzq);
        break;
      default:
        jj_la1[1] = jj_gen;
        ErrorNoSepINICIO();
      }
      Cuerpo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SepDer:
        jj_consume_token(SepDer);
        break;
      default:
        jj_la1[2] = jj_gen;
        ErrorNoSepFINAL();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIN:
        jj_consume_token(FIN);
        break;
      default:
        jj_la1[3] = jj_gen;
        ErrorNOFIN();
      }
      jj_consume_token(0);
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

// m√©todo cuerpo, lee un conjunto de sentencias tama√±o n
  final public void Cuerpo() throws ParseException {
               /*@bgen(jjtree) Cuerpo */
  ASTCuerpo jjtn000 = new ASTCuerpo(JJTCUERPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case CicloIterado:
        case CicloLimit:
        case ESCRIBIR:
        case PuntoComa:
        case ENTERO:
        case FLOTANTE:
        case ID_CADENA:
        case BOOLEANO:
        case IDENTIFICADOR:
        case UNKNOW:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        sentencias();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

// metodo sentencias, lee todas las gramaticas que pueden ser reconocidas por el compilador
  final public void sentencias() throws ParseException {
                   /*@bgen(jjtree) sentencias */
  ASTsentencias jjtn000 = new ASTsentencias(JJTSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        if (jj_2_1(2)) {
          Declaracion();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR:
            Asignacion();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PuntoComa:
              jj_consume_token(PuntoComa);
              break;
            default:
              jj_la1[5] = jj_gen;
              errorFinlinea();
            }
            break;
          case CicloIterado:
            Ciclo_RepitoHastaQue();
            break;
          case CicloLimit:
            Ciclo_RepitoMientras();
            break;
          case IF:
            Decide();
            break;
          case ESCRIBIR:
            Muestra();
            break;
          case UNKNOW:
            error();
            break;
          case PuntoComa:
            errorDOBLElinea();
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
        System.out.println(e.toString());  //imprime el mensaje de error
    error_skipto(PuntoComa, FIN, EOF);
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Muestra() throws ParseException {
                /*@bgen(jjtree) Muestra */
  ASTMuestra jjtn000 = new ASTMuestra(JJTMUESTRA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ESCRIBIR);

      jj_consume_token(ParenIzq);
      Mensaje();
      jj_consume_token(ParenDer);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PuntoComa:
        jj_consume_token(PuntoComa);
        break;
      default:
        jj_la1[7] = jj_gen;
        errorFinlinea();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Mensaje() throws ParseException {
                /*@bgen(jjtree) Mensaje */
  ASTMensaje jjtn000 = new ASTMensaje(JJTMENSAJE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENAS:
      case IDENTIFICADOR:
        Concatenacion();
        break;
      default:
        jj_la1[8] = jj_gen;
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;

      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Concatenacion() throws ParseException {
                      /*@bgen(jjtree) Concatenacion */
  ASTConcatenacion jjtn000 = new ASTConcatenacion(JJTCONCATENACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          Variable_IDEN();
          break;
        case CADENAS:
          jj_consume_token(CADENAS);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(MAS);
        Concatenacion();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CADENAS:
        case IDENTIFICADOR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR:
            Variable_IDEN();
            break;
          case CADENAS:
            jj_consume_token(CADENAS);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//----------------------------------------------------------------------------------------------
//########  DECIDE IF-ELSE ##########
  final public void Decide() throws ParseException {
               /*@bgen(jjtree) Decide */
  ASTDecide jjtn000 = new ASTDecide(JJTDECIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IF();
      if (jj_2_3(2)) {
        ELSE();
      } else {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;

      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void IF() throws ParseException {
           /*@bgen(jjtree) IF */
  ASTIF jjtn000 = new ASTIF(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(ParenIzq);
      OpComparacion();
      jj_consume_token(ParenDer);
      jj_consume_token(ASIGNACION);
      jj_consume_token(SepIzq);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case CicloIterado:
        case CicloLimit:
        case ESCRIBIR:
        case PuntoComa:
        case ENTERO:
        case FLOTANTE:
        case ID_CADENA:
        case BOOLEANO:
        case IDENTIFICADOR:
        case UNKNOW:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_2;
        }
        sentencias();
      }
      jj_consume_token(SepDer);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ELSE() throws ParseException {
             /*@bgen(jjtree) ELSE */
  ASTELSE jjtn000 = new ASTELSE(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      jj_consume_token(SepIzq);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case CicloIterado:
        case CicloLimit:
        case ESCRIBIR:
        case PuntoComa:
        case ENTERO:
        case FLOTANTE:
        case ID_CADENA:
        case BOOLEANO:
        case IDENTIFICADOR:
        case UNKNOW:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_3;
        }
        sentencias();
      }
      jj_consume_token(SepDer);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PuntoComa:
        jj_consume_token(PuntoComa);
        break;
      default:
        jj_la1[14] = jj_gen;
        errorFinlinea();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ############## CICLOS #############
//----------------------------------------------------------------------------------------------------------------------

//No es necesario aqui agregar un jjtThis.setName(t.image);
//debido a que solo necesitamos el nombre de la sentencia y esa se nos da automaticamente
// En cambio, solo necesitamos describir la condicion en el arbol de expresiones
//Para esto dividi a√∫n mas la gramatica para agregar los elementos de la condici√≥n
//
  final public void Ciclo_RepitoHastaQue() throws ParseException {
                             /*@bgen(jjtree) Ciclo_RepitoHastaQue */
  ASTCiclo_RepitoHastaQue jjtn000 = new ASTCiclo_RepitoHastaQue(JJTCICLO_REPITOHASTAQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CicloIterado);
      jj_consume_token(ParenIzq);
      Condicion_RepitoHQ();
      jj_consume_token(ParenDer);
      jj_consume_token(ASIGNACION);
      jj_consume_token(SepIzq);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case CicloIterado:
        case CicloLimit:
        case ESCRIBIR:
        case PuntoComa:
        case ENTERO:
        case FLOTANTE:
        case ID_CADENA:
        case BOOLEANO:
        case IDENTIFICADOR:
        case UNKNOW:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        sentencias();
      }
      jj_consume_token(SepDer);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PuntoComa:
        jj_consume_token(PuntoComa);
        break;
      default:
        jj_la1[16] = jj_gen;
        errorFinlinea();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

//Aqui en la condicion necesitamos describir en su propia clase los lexemas de los tokens
//	Dividi la condicion asi para:
//		* Obtener el nombre de la gramatica como un subnodo, y que se imprima en el arbol
//		* Darles a los nodos hijos de la condicion (inicio y limitefinal) su propia gramatica
//		* Ya no necesito usar Token t; para el ---> jjtThis.setName(t.image);
//		* Ya lo hara automaticamente las gramaticas auxiliares
  final public void Condicion_RepitoHQ() throws ParseException {
                           /*@bgen(jjtree) Condicion_RepitoHQ */
  ASTCondicion_RepitoHQ jjtn000 = new ASTCondicion_RepitoHQ(JJTCONDICION_REPITOHQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Condi_inicio();
      jj_consume_token(COMA);
      Condi_limite();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Condi_inicio() throws ParseException {
                     /*@bgen(jjtree) Condi_inicio */
  ASTCondi_inicio jjtn000 = new ASTCondi_inicio(JJTCONDI_INICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variable_IDEN();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Condi_limite() throws ParseException {
                     /*@bgen(jjtree) Condi_limite */
  ASTCondi_limite jjtn000 = new ASTCondi_limite(JJTCONDI_LIMITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        Variable_IDEN();
        break;
      case NUMERO:
      case NUMDECIMAL:
      case CADENAS:
      case EST_LOGIC:
        DataType();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//----------------------------------------------------------------------------------------------------------------------
  final public void Ciclo_RepitoMientras() throws ParseException {
                              /*@bgen(jjtree) Ciclo_RepitoMientras */
  ASTCiclo_RepitoMientras jjtn000 = new ASTCiclo_RepitoMientras(JJTCICLO_REPITOMIENTRAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CicloLimit);
      jj_consume_token(ASIGNACION);
      jj_consume_token(SepIzq);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case CicloIterado:
        case CicloLimit:
        case ESCRIBIR:
        case PuntoComa:
        case ENTERO:
        case FLOTANTE:
        case ID_CADENA:
        case BOOLEANO:
        case IDENTIFICADOR:
        case UNKNOW:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
        sentencias();
      }
      jj_consume_token(SepDer);
      jj_consume_token(CicloWhile);
      jj_consume_token(ParenIzq);
      OpComparacion();
      jj_consume_token(ParenDer);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PuntoComa:
        jj_consume_token(PuntoComa);
        break;
      default:
        jj_la1[19] = jj_gen;
        errorFinlinea();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//----------------------------------------------------------------------------------------------------------------------
// DECLARACION DE VARIABLES //
//----------------------------------------------------------------------------------------------------------------------
  final public void Declaracion() throws ParseException {
 /*@bgen(jjtree) Declaracion */
        ASTDeclaracion jjtn000 = new ASTDeclaracion(JJTDECLARACION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);//ANALIZADOR SEMANTICO, AUN NO
//*********************************
        //Este int almacena el id del token. Su identificador dentro de la tabla de lexemas
        int td;
    try {
      Variable_dato();
        //Se declara la variable t para manejar los objetos token (lexemas)
    Token t;

        //NO ES IMPORTANTE, ES PARA EL ANALIZADOR SEMANTICO
        //Cuando se lee un token, se almacena su id dentro de td
        //token.kind nos retorna el id del lexema en la tabla de simbolos
        td = token.kind;
      //ARBOL SINTACTICO
      //El token identificado (objeto tipo token), es almacenado dentro de t. Ya tenemos los datos dentro del lexema
      // se asigna el nombre de la variable (el lexema, en este caso <IDENTIFICADOR>) 
      //dentro de un objeto Token para ser impresO en el √°rbol en la siguiente linea 
        t = jj_consume_token(IDENTIFICADOR);
        // Aqui el string del identificador (v1, num, i, etc.) es guardado en una clase con el mismo nombre de
   // la gramatica mas el prefijo 'AST': ASTDeclaracion.java <---- Aqui se crearan peque√±os metodos para realizar la asignaci√≥n
   //Es importante crear estos metodos porque, por si mismo no existe el metodo .setName(), este debe ser creado manualmente
        jjtn000.setName(t.image);

        //Esta variable es para el proceso del analizador semantico, aun no es importante
        var = t;

   //******************COMENTARIOS PARA el analizador SEMANTICo, A√öN NO ES IMPORTANTE*********************
        //Manda a llamar la clase semantica y su metodo para comprobar esto 
        //Retornara un string vacio o un null
        if(ClaseSemantica.checkVariable(var).equals("")){

                //Si se retorna un string vacio entonces ya ha sido declarada la variable
                errormsg = errormsg+"Error semantico en la linea " +var.beginLine +", columna "+var.beginColumn +", la variable "+ var.image + " ya  ha sido declarada \r\n";

                //Se suma la cantidad de sentencias incorrectas
                sentencias_inco++;
        }else{

                //Si no existe error alguno, entonces se insertan en la tabla
                ClaseSemantica.InsertarSimbolo(var,td);
        }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        AsignacionD();
        break;
      default:
        jj_la1[20] = jj_gen;

      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PuntoComa:
        jj_consume_token(PuntoComa);
        break;
      default:
        jj_la1[21] = jj_gen;
        errorFinlinea();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//----------------------------------------------------------------------------------------------------------------------

// ASIGNACION DE VALORES DESPUES DE UNA DECLARACION
//ESTRUCTURA BASICA DE LA GRAMATICA
//esto es la base 
  final public void AsignacionD() throws ParseException {
                    /*@bgen(jjtree) AsignacionD */
  ASTAsignacionD jjtn000 = new ASTAsignacionD(JJTASIGNACIOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEER:
        LEER();
        break;
      case ParenIzq:
      case MENOS:
      case NUMERO:
      case NUMDECIMAL:
      case CADENAS:
      case EST_LOGIC:
      case IDENTIFICADOR:
        Expresion();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ASIGNACION GENERAL DE VALORES A UNA VARIABLE
  final public void Asignacion() throws ParseException {
 /*@bgen(jjtree) Asignacion */
        ASTAsignacion jjtn000 = new ASTAsignacion(JJTASIGNACION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);//Declaracion de variables Token
        // t es para el arbol
        // t2 es usado para el analizador semantico
        Token t, t2;
    try {
      //Asignamos el valor del identificador de la variable en la clase ASTAsignacion
              //para que el arbol sea mostrado de la siguiente forma :
              //		 "Asignacion para el identificador: " + this.name
              t = jj_consume_token(IDENTIFICADOR);
                jjtn000.setName(t.image);

                //Ya lo que sigue despues es para el analizador semantico
                //Apartado del analizador semantico
                var = t;

                //Aqui se intenta buscar algo parecido: Se determina si la variable existe o ha sido declarada
                // Si no existe, entonces retornara un mensaje de error anunciando eso
                //Y ese mensaje se sumara a todos los mensajes de error existentes
        if(!(ClaseSemantica.checkVariable(var).equals(""))){
                errormsg = errormsg+ClaseSemantica.checkVariable(var);
                sentencias_inco++;

        }//Si no hay error, entonces se sigue de largo

      jj_consume_token(ASIGNACION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEER:
        LEER();
        break;
      case ParenIzq:
      case MENOS:
      case NUMERO:
      case NUMDECIMAL:
      case CADENAS:
      case EST_LOGIC:
      case IDENTIFICADOR:
        Expresion();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                /*if(t2.kind != LEER){
			Expresiones.Convierte(expresion);
		} */


                t2 = token;
                //Se verifica que las declaraciones sean congruentes 
                //Se verifica que el tipo de variable y su dato sean del mismo tipo
                if(!(ClaseSemantica.checkAsing(var,t2).equals(" "))){
                        errormsg = errormsg+ClaseSemantica.checkAsing(var,t2);
                        sentencias_inco++;
                }
                expresion = " ";
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//---------------------------------------------------------------------------


//###### GRAMATICA PARA EXPRESIONES MATEMATICAS DESPUES DE UNA ASIGNACION O DECLARACION

//Lo importante a mostrar  dentro de esta  seccion de gramaticas seran los operadores que puedan surgir (+,-,*,/,%)
// Y se mostraran justo debajo de la estructura de las expresiones
  final public void Expresion() throws ParseException {
                  /*@bgen(jjtree) Expresion */
  ASTExpresion jjtn000 = new ASTExpresion(JJTEXPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Termino();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAS:
        case MENOS:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_6;
        }
        Mas_menos();
        Termino();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Termino() throws ParseException {
                /*@bgen(jjtree) Termino */
  ASTTermino jjtn000 = new ASTTermino(JJTTERMINO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Factor();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIV:
        case MODULO:
        case MULTI:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_7;
        }
        MDM();
        Factor();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Factor() throws ParseException {
               /*@bgen(jjtree) Factor */
  ASTFactor jjtn000 = new ASTFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOS:
        Menoss();
        Factor();
        break;
      case ParenIzq:
      case NUMERO:
      case NUMDECIMAL:
      case CADENAS:
      case EST_LOGIC:
      case IDENTIFICADOR:
        Primario();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Primario() throws ParseException {
                 /*@bgen(jjtree) Primario */
  ASTPrimario jjtn000 = new ASTPrimario(JJTPRIMARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ParenIzq:
        jj_consume_token(ParenIzq);
        Expresion();
        jj_consume_token(ParenDer);
        break;
      case NUMERO:
      case NUMDECIMAL:
      case CADENAS:
      case EST_LOGIC:
        DataType();
        break;
      case IDENTIFICADOR:
        Variable_IDEN();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//--------------------OPERAdores----------------------
//TODOS ESTOS TIENEN EN SUS CLASES  LA MISMA EXTRUCTURA PARA SER MOSTRADA EN EL ARBOL:
//		"Operador matematico: " + this.name
  final public void Mas_menos() throws ParseException {
                  /*@bgen(jjtree) Mas_menos */
                  ASTMas_menos jjtn000 = new ASTMas_menos(JJTMAS_MENOS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        t = jj_consume_token(MAS);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setName(t.image);
        break;
      case MENOS:
        t = jj_consume_token(MENOS);
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                             jjtn000.setName(t.image);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Menoss() throws ParseException {
               /*@bgen(jjtree) Menoss */
               ASTMenoss jjtn000 = new ASTMenoss(JJTMENOSS);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MENOS);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MDM() throws ParseException {
             /*@bgen(jjtree) MDM */
             ASTMDM jjtn000 = new ASTMDM(JJTMDM);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTI:
        t = jj_consume_token(MULTI);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setName(t.image);
        break;
      case DIV:
        t = jj_consume_token(DIV);
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                  jjtn000.setName(t.image);
        break;
      case MODULO:
        t = jj_consume_token(MODULO);
                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                           jjtc000 = false;
                                                                                          jjtn000.setName(t.image);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

// ############## OPERACIONES DE COMPARACION PARA IF O CICLOS  ####################
  final public void OpComparacion() throws ParseException {
                      /*@bgen(jjtree) OpComparacion */
  ASTOpComparacion jjtn000 = new ASTOpComparacion(JJTOPCOMPARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
      case NUMDECIMAL:
      case CADENAS:
      case EST_LOGIC:
        FactorL();
        break;
      case IDENTIFICADOR:
        FactorR();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  final public void FactorL() throws ParseException {
                /*@bgen(jjtree) FactorL */
  ASTFactorL jjtn000 = new ASTFactorL(JJTFACTORL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DataType();
      Comparadores();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
      case NUMDECIMAL:
      case CADENAS:
      case EST_LOGIC:
        DataType();
        break;
      case IDENTIFICADOR:
        Variable_IDEN();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FactorR() throws ParseException {
                /*@bgen(jjtree) FactorR */
  ASTFactorR jjtn000 = new ASTFactorR(JJTFACTORR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variable_IDEN();
      Comparadores();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
      case NUMDECIMAL:
      case CADENAS:
      case EST_LOGIC:
        DataType();
        break;
      case IDENTIFICADOR:
        Variable_IDEN();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* NO ME GUST√ì AL FINAL ESTA GRAMATICA, IGNORAR
void ExpresionL():{} 
{   LOOKAHEAD(2) 
	(  FactorL() Comparadores() ExpresionL()  ) 
	  
	|  FactorL()
} */








//usar .bat para borrar archivos

//---------------- GRAMATICAS AUXILIARES ----------------------------
//Para cuando se necesite usar lexemas y no consumir la gramatica
  final public void Variable_IDEN() throws ParseException {
                      /*@bgen(jjtree) Variable_IDEN */
                      ASTVariable_IDEN jjtn000 = new ASTVariable_IDEN(JJTVARIABLE_IDEN);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFICADOR);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// DATOS Y OPERADORES USADOS EN SENTENCIAS
  final public void DataType() throws ParseException {
                 /*@bgen(jjtree) DataType */
                 ASTDataType jjtn000 = new ASTDataType(JJTDATATYPE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        t = jj_consume_token(NUMERO);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setName(t.image);
        break;
      case NUMDECIMAL:
        t = jj_consume_token(NUMDECIMAL);
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                             jjtn000.setName(t.image);
        break;
      case EST_LOGIC:
        t = jj_consume_token(EST_LOGIC);
                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                            jjtc000 = false;
                                                                                                           jjtn000.setName(t.image);
        break;
      case CADENAS:
        t = jj_consume_token(CADENAS);
                                                                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                         jjtc000 = false;
                                                                                                                                                        jjtn000.setName(t.image);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Comparadores() throws ParseException {
                     /*@bgen(jjtree) Comparadores */
                     ASTComparadores jjtn000 = new ASTComparadores(JJTCOMPARADORES);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t6;
    try {
      if (jj_2_4(3)) {
        t6 = jj_consume_token(MENOR);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setName(t6.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAYOR:
          t6 = jj_consume_token(MAYOR);
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                            jjtn000.setName(t6.image);
          break;
        case MENOR_IGUAL:
          t6 = jj_consume_token(MENOR_IGUAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.setName(t6.image);
          break;
        case MAYOR_IGUAL:
          t6 = jj_consume_token(MAYOR_IGUAL);
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                       jjtn000.setName(t6.image);
          break;
        case IGUALDAD:
          t6 = jj_consume_token(IGUALDAD);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setName(t6.image);
          break;
        case NOTEQ:
          t6 = jj_consume_token(NOTEQ);
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                               jjtn000.setName(t6.image);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LEER() throws ParseException {
             /*@bgen(jjtree) LEER */
              ASTLEER jjtn000 = new ASTLEER(JJTLEER);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LEER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.setName(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Variable_dato() throws ParseException {
                      /*@bgen(jjtree) Variable_dato */
                      ASTVariable_dato jjtn000 = new ASTVariable_dato(JJTVARIABLE_DATO);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t5;
    try {
      if (jj_2_5(3)) {
        t5 = jj_consume_token(ENTERO);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.setName(t5.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOTANTE:
          t5 = jj_consume_token(FLOTANTE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setName(t5.image);
          break;
        case ID_CADENA:
          t5 = jj_consume_token(ID_CADENA);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setName(t5.image);
          break;
        case BOOLEANO:
          t5 = jj_consume_token(BOOLEANO);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setName(t5.image);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Operadores() throws ParseException {
                   /*@bgen(jjtree) Operadores */
  ASTOperadores jjtn000 = new ASTOperadores(JJTOPERADORES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(3)) {
        jj_consume_token(MAS);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MENOS:
          jj_consume_token(MENOS);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        case MODULO:
          jj_consume_token(MODULO);
          break;
        case MULTI:
          jj_consume_token(MULTI);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  void error_skipto(int puntocoma, int fincode, int finfile) throws ParseException {
                                                            /*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {Token t;
  sentencias_inco++;
  // consume tokens all the way up to a token of "kind" - use a do-while loop
  // rather than a while because the current token is the one immediately before
  // the erroneous token (in our case the token immediately before what should
  // have been "if"/"while".
  do {
    t = getNextToken();
  }
  while ( (t.kind !=puntocoma)&&(t.kind !=fincode)&&(t.kind !=finfile));/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public void error() throws ParseException {
 /*@bgen(jjtree) error */
        ASTerror jjtn000 = new ASTerror(JJTERROR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String errores = " ";
        Token t;
    try {
      t = jj_consume_token(UNKNOW);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
        errores = "Simbolo: " + t.image + " no reconocido en la l\u00c3\u00adnea "+String.valueOf(t.beginLine)+" columna "+String.valueOf(t.endColumn)+"\r\n";
        errormsg = errormsg+errores;
        sentencias_inco++;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void errorFinlinea() throws ParseException {
                      /*@bgen(jjtree) errorFinlinea */
        ASTerrorFinlinea jjtn000 = new ASTerrorFinlinea(JJTERRORFINLINEA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);sentencias_inco++;
        System.out.println("Error sint"+"\u00e1"+"ctico en la linea: "+token.beginLine+" Columna: "+(token.endColumn+1)+" falta ';'");
    try {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void errorDOBLElinea() throws ParseException {
                        /*@bgen(jjtree) errorDOBLElinea */
        ASTerrorDOBLElinea jjtn000 = new ASTerrorDOBLElinea(JJTERRORDOBLELINEA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);sentencias_inco++;
        System.out.println("Error sint"+"\u00e1"+"ctico en la linea: "+token.beginLine+" Columna: "+(token.endColumn+1)+" hay mas de un ';'  ");
    try {
      jj_consume_token(PuntoComa);
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

//GRAMATICAS DE ERROR PARA LA ESTRUCTURA DEL CODIGO COATL
  final public void ErrorNoinicio() throws ParseException {
                      /*@bgen(jjtree) ErrorNoinicio */
        ASTErrorNoinicio jjtn000 = new ASTErrorNoinicio(JJTERRORNOINICIO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);sentencias_inco++;
        System.out.println("Error sint"+"\u00e1"+"ctico en la linea: "+getToken(1).beginLine+" Columna: "+getToken(1).endColumn+": No hay palabra de arranque \"compilar_coatl\" ");
    try {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void ErrorNoSepINICIO() throws ParseException {
                         /*@bgen(jjtree) ErrorNoSepINICIO */
        ASTErrorNoSepINICIO jjtn000 = new ASTErrorNoSepINICIO(JJTERRORNOSEPINICIO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);System.out.println("Error sint"+"\u00e1"+"ctico en la linea: "+getToken(1).beginLine+" Columna: "+getToken(1).beginColumn+" No hay llave izquierda \"{\" ");
        sentencias_inco++;
    try {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void ErrorNoSepFINAL() throws ParseException {
                        /*@bgen(jjtree) ErrorNoSepFINAL */
        ASTErrorNoSepFINAL jjtn000 = new ASTErrorNoSepFINAL(JJTERRORNOSEPFINAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);sentencias_inco++;
        System.out.println("Error sint"+"\u00e1"+"ctico en la linea: "+token.beginLine+" Columna: "+token.beginColumn+": No hay llave derecha \"}\"");
    try {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void ErrorNOFIN() throws ParseException {
                   /*@bgen(jjtree) ErrorNOFIN */
        ASTErrorNOFIN jjtn000 = new ASTErrorNOFIN(JJTERRORNOFIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);sentencias_inco++;
        System.out.println("Error sint"+"\u00e1"+"ctico en la linea: "+token.beginLine+" Columna: "+token.beginColumn+" No hay palabra de cierre\"ejecutar_coatl\"" );
    try {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ENTERO)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(BOOLEANO)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(ID_CADENA)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(FLOTANTE)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(SepIzq)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(MAS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    if (jj_scan_token(MAS)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(MENOR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CompilabobTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x8000,0x10000,0x20,0x20b40,0x20000,0x20b40,0x20000,0x0,0x0,0x0,0x0,0x20b40,0x20b40,0x20000,0x20b40,0x20000,0x0,0x20b40,0x20000,0x80000,0x20000,0x40003000,0x40003000,0x60000000,0x80000000,0x40002000,0x2000,0x60000000,0x80000000,0x0,0x0,0x0,0x0,0x9e00000,0x0,0xc0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0xc3c,0x0,0xc00,0x0,0x500,0x500,0x500,0x500,0xc3c,0xc3c,0x0,0xc3c,0x0,0x7c0,0xc3c,0x0,0x0,0x0,0x7c0,0x7c0,0x0,0x3,0x7c0,0x7c0,0x0,0x3,0x7c0,0x7c0,0x7c0,0x3c0,0x0,0x38,0x3,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compilabob(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilabob(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilabobTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compilabob(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CompilabobTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compilabob(CompilabobTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompilabobTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    // {jjtThis.setImage(t.image);}


}
